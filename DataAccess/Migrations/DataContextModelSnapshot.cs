// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Activity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.Models.ActivityStudent", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("StudentID");

                    b.ToTable("ActivityStudents");
                });

            modelBuilder.Entity("Domain.Models.Attachment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Models.AttachmentActivityStudent", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ActivityStudentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachementID")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityStudentID");

                    b.HasIndex("AttachmentID");

                    b.ToTable("AttachmentActivityStudents");
                });

            modelBuilder.Entity("Domain.Models.Attendance", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IfExists")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Domain.Models.ChildCard", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BirthCertificateImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("BirthOfDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CardFillDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ChildArrangement")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ChildReceivedAllTheRequiredVaccinations")
                        .HasColumnType("bit");

                    b.Property<string>("ConditionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionReasons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionRelatedIndicators")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DidHeTakesHealthVaccinations")
                        .HasColumnType("bit");

                    b.Property<bool?>("DidHeTakesMedication")
                        .HasColumnType("bit");

                    b.Property<bool?>("DidStudentHaveSurgery")
                        .HasColumnType("bit");

                    b.Property<string>("DiseasesOfTheChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherEducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherWorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherWorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FromSpecialNeeds")
                        .HasColumnType("bit");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GurdianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HaveChaildAttendedKindergartenBefore")
                        .HasColumnType("bit");

                    b.Property<string>("HowTheCaseMonitoredDone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsThereAnyoneInTheFamilyWithSpecialNeeds")
                        .HasColumnType("bit");

                    b.Property<string>("KindergartenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManegerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherWorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherWorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NumberOfBrothers")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfSisters")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfSpicailNeeds")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentIdentifyImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentsSituation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonalImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentPersonImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheAuthoritySupervisingDisability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheTypeOfConditionTheChildIsFacing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("childLivesWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isCheck")
                        .HasColumnType("bit");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BirthCertificateImageID");

                    b.HasIndex("ParentIdentifyImageID");

                    b.HasIndex("PersonalImageID");

                    b.HasIndex("StudentPersonImageID");

                    b.ToTable("ChildCards");
                });

            modelBuilder.Entity("Domain.Models.Class", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("AttendanceID")
                        .HasColumnType("bigint");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClassYear")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralEvaluationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AttendanceID");

                    b.HasIndex("TeacherID")
                        .IsUnique()
                        .HasFilter("[TeacherID] IS NOT NULL");

                    b.ToTable("Section");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            ClassName = "براعم",
                            ClassYear = 2024L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2L,
                            ClassName = "بستان",
                            ClassYear = 2024L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Models.ClassSubjects", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubjectID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("Domain.Models.Comments", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.ContactNumbers", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long>("ChildCardID")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GuardianID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ChildCardID");

                    b.HasIndex("GuardianID");

                    b.ToTable("ContactNumbers");
                });

            modelBuilder.Entity("Domain.Models.Diseases", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiseaseLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Domain.Models.Experience", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperienceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NumberOfYears")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Domain.Models.GeneralEvaluation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("GeneralEvaluations");
                });

            modelBuilder.Entity("Domain.Models.Guardian", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GuardianTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("GurdianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("GuardianTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("Domain.Models.GuardianType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GuardianType");
                });

            modelBuilder.Entity("Domain.Models.Hobbies", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HobbiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Domain.Models.Level", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FeesAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("Domain.Models.Messaging", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sender")
                        .HasColumnType("bit");

                    b.Property<long>("User2ID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("User2ID");

                    b.HasIndex("UserID");

                    b.ToTable("Messagings");
                });

            modelBuilder.Entity("Domain.Models.Posts", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Postss");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discription = "غدا سيكون موعد دفع الرسوم",
                            PostDate = new DateTime(2024, 6, 19, 18, 46, 24, 476, DateTimeKind.Local).AddTicks(6651),
                            UserID = 1L
                        });
                });

            modelBuilder.Entity("Domain.Models.ProgressEvaluation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectID")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("ProgressEvaluations");
                });

            modelBuilder.Entity("Domain.Models.RegistrationFees", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("BusAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FeesAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("Level")
                        .HasColumnType("bigint");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("RegistrationFees");
                });

            modelBuilder.Entity("Domain.Models.Section", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.ToTable("GurdianTypes");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            ClassID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شعبة أ"
                        },
                        new
                        {
                            ID = 2L,
                            ClassID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شعبة ب"
                        },
                        new
                        {
                            ID = 3L,
                            ClassID = 2L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شعبة أ"
                        },
                        new
                        {
                            ID = 4L,
                            ClassID = 2L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شعبة ج"
                        });
                });

            modelBuilder.Entity("Domain.Models.StudentFees", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FeesAmount")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("FeesDate")
                        .HasColumnType("date");

                    b.Property<long?>("StudentID")
                        .HasColumnType("bigint");

                    b.Property<bool?>("WithBus")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentFees");
                });

            modelBuilder.Entity("Domain.Models.StudentLevel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LevelID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentLevels");
                });

            modelBuilder.Entity("Domain.Models.Students.Student", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("AttendanceID")
                        .HasColumnType("bigint");

                    b.Property<long?>("BirthCertificateImageID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChildCardID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralEvaluationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("GuardianID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCertificateImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonalImageID")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AttendanceID");

                    b.HasIndex("BirthCertificateImageID");

                    b.HasIndex("ChildCardID");

                    b.HasIndex("ClassID");

                    b.HasIndex("ParentCertificateImageID");

                    b.HasIndex("PersonalImageID");

                    b.HasIndex("userID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "رياضيات براعم"
                        },
                        new
                        {
                            ID = 2L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "عربي براعم"
                        });
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciallizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdNumber = "3827378336",
                            PhoneNumber = "0596283683",
                            SpeciallizationName = "اللغة العربية",
                            TeacherName = "تسنيم منصور",
                            UserID = 2L
                        });
                });

            modelBuilder.Entity("Domain.Models.Unit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SubjectID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "الارقام العشرية",
                            SubjectID = 1L
                        },
                        new
                        {
                            ID = 2L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "حرف الألف",
                            SubjectID = 2L
                        },
                        new
                        {
                            ID = 3L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "الأرقام",
                            SubjectID = 1L
                        },
                        new
                        {
                            ID = 4L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "حرف الباء",
                            SubjectID = 2L
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "q201612@gmail.com",
                            IsActive = true,
                            Name = "هنا عواودة",
                            Password = "google@1",
                            Role = "admin",
                            UserName = "q201612@gmail.com"
                        },
                        new
                        {
                            ID = 2L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qusay201612@gmail.com",
                            IsActive = true,
                            Name = "تسنيم عواودة",
                            Password = "google@2",
                            Role = "teacher",
                            UserName = "qusay201612@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.UserVerificationCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RequestCount")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationCodes");
                });

            modelBuilder.Entity("Domain.Models.Activity", b =>
                {
                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("Activities")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Domain.Models.ActivityStudent", b =>
                {
                    b.HasOne("Domain.Models.Activity", "Activity")
                        .WithMany("ActivityStudents")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Students.Student", "Student")
                        .WithMany("ActivityStudents")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Models.AttachmentActivityStudent", b =>
                {
                    b.HasOne("Domain.Models.ActivityStudent", "ActivityStudent")
                        .WithMany("AttachmentActivityStudents")
                        .HasForeignKey("ActivityStudentID");

                    b.HasOne("Domain.Models.Attachment", "Attachment")
                        .WithMany("AttachmentActivityStudents")
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityStudent");

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Domain.Models.ChildCard", b =>
                {
                    b.HasOne("Domain.Models.Attachment", "BirthCertificateImage")
                        .WithMany()
                        .HasForeignKey("BirthCertificateImageID");

                    b.HasOne("Domain.Models.Attachment", "ParentIdentifyImage")
                        .WithMany()
                        .HasForeignKey("ParentIdentifyImageID");

                    b.HasOne("Domain.Models.Attachment", "PersonalImage")
                        .WithMany()
                        .HasForeignKey("PersonalImageID");

                    b.HasOne("Domain.Models.Attachment", "StudentPersonImage")
                        .WithMany()
                        .HasForeignKey("StudentPersonImageID");

                    b.Navigation("BirthCertificateImage");

                    b.Navigation("ParentIdentifyImage");

                    b.Navigation("PersonalImage");

                    b.Navigation("StudentPersonImage");
                });

            modelBuilder.Entity("Domain.Models.Class", b =>
                {
                    b.HasOne("Domain.Models.Attendance", "Attendance")
                        .WithMany("Section")
                        .HasForeignKey("AttendanceID");

                    b.HasOne("Domain.Models.Teacher", "Teacher")
                        .WithOne()
                        .HasForeignKey("Domain.Models.Class", "TeacherID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Attendance");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Models.ClassSubjects", b =>
                {
                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.Comments", b =>
                {
                    b.HasOne("Domain.Models.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ContactNumbers", b =>
                {
                    b.HasOne("Domain.Models.ChildCard", "ChildCard")
                        .WithMany()
                        .HasForeignKey("ChildCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Guardian", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildCard");

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("Domain.Models.Diseases", b =>
                {
                    b.HasOne("Domain.Models.Students.Student", "Student")
                        .WithMany("Diseases")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Models.Experience", b =>
                {
                    b.HasOne("Domain.Models.Teacher", "Teacher")
                        .WithMany("Experience")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Models.GeneralEvaluation", b =>
                {
                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("GeneralEvaluations")
                        .HasForeignKey("ClassID");

                    b.HasOne("Domain.Models.Students.Student", "Students")
                        .WithMany("GeneralEvaluations")
                        .HasForeignKey("StudentID");

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("GeneralEvaluations")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Class");

                    b.Navigation("Students");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.Guardian", b =>
                {
                    b.HasOne("Domain.Models.GuardianType", "GurdianType")
                        .WithMany()
                        .HasForeignKey("GuardianTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GurdianType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Hobbies", b =>
                {
                    b.HasOne("Domain.Models.Students.Student", "Student")
                        .WithMany("Hobbies")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Models.Messaging", b =>
                {
                    b.HasOne("Domain.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Domain.Models.Posts", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ProgressEvaluation", b =>
                {
                    b.HasOne("Domain.Models.Students.Student", "Students")
                        .WithMany("ProgressEvaluations")
                        .HasForeignKey("StudentID");

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID");

                    b.HasOne("Domain.Models.Unit", "Unit")
                        .WithMany("ProgressEvaluations")
                        .HasForeignKey("UnitID");

                    b.Navigation("Students");

                    b.Navigation("Subject");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.Models.Section", b =>
                {
                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("Sections")
                        .HasForeignKey("ClassID");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Domain.Models.StudentFees", b =>
                {
                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("StudentFees")
                        .HasForeignKey("ClassID");

                    b.HasOne("Domain.Models.Students.Student", "student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("student");
                });

            modelBuilder.Entity("Domain.Models.StudentLevel", b =>
                {
                    b.HasOne("Domain.Models.Level", "Level")
                        .WithMany("StudentLevel")
                        .HasForeignKey("LevelID");

                    b.HasOne("Domain.Models.Students.Student", "Student")
                        .WithMany("StudentLevel")
                        .HasForeignKey("StudentID");

                    b.Navigation("Level");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Models.Students.Student", b =>
                {
                    b.HasOne("Domain.Models.Attendance", "Attendance")
                        .WithMany("Students")
                        .HasForeignKey("AttendanceID");

                    b.HasOne("Domain.Models.Attachment", "BirthCertificateImage")
                        .WithMany()
                        .HasForeignKey("BirthCertificateImageID");

                    b.HasOne("Domain.Models.ChildCard", "ChildCard")
                        .WithMany("Students")
                        .HasForeignKey("ChildCardID");

                    b.HasOne("Domain.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Attachment", "ParentCertificateImage")
                        .WithMany()
                        .HasForeignKey("ParentCertificateImageID");

                    b.HasOne("Domain.Models.Attachment", "PersonalImage")
                        .WithMany()
                        .HasForeignKey("PersonalImageID");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID");

                    b.Navigation("Attendance");

                    b.Navigation("BirthCertificateImage");

                    b.Navigation("ChildCard");

                    b.Navigation("Class");

                    b.Navigation("ParentCertificateImage");

                    b.Navigation("PersonalImage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Unit", b =>
                {
                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("Units")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.UserVerificationCode", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Activity", b =>
                {
                    b.Navigation("ActivityStudents");
                });

            modelBuilder.Entity("Domain.Models.ActivityStudent", b =>
                {
                    b.Navigation("AttachmentActivityStudents");
                });

            modelBuilder.Entity("Domain.Models.Attachment", b =>
                {
                    b.Navigation("AttachmentActivityStudents");
                });

            modelBuilder.Entity("Domain.Models.Attendance", b =>
                {
                    b.Navigation("Section");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Models.ChildCard", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Models.Class", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ClassSubjects");

                    b.Navigation("GeneralEvaluations");

                    b.Navigation("Sections");

                    b.Navigation("StudentFees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Models.Level", b =>
                {
                    b.Navigation("StudentLevel");
                });

            modelBuilder.Entity("Domain.Models.Posts", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Models.Students.Student", b =>
                {
                    b.Navigation("ActivityStudents");

                    b.Navigation("Diseases");

                    b.Navigation("GeneralEvaluations");

                    b.Navigation("Hobbies");

                    b.Navigation("ProgressEvaluations");

                    b.Navigation("StudentLevel");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("GeneralEvaluations");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Domain.Models.Unit", b =>
                {
                    b.Navigation("ProgressEvaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
